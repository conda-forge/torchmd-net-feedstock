{% set name = "torchmd-net" %}
{% set version = "0.10.0" %}
# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion
{% set torch_proc_type = "cuda" if cuda_compiler_version != "None" else "cpu" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/torchmd/torchmd-net/archive/{{ version }}.tar.gz
  sha256: 70ae05d2972c2f05d4441c53adb7daf141421e1ac105b8bdec27e8a736271d6a

build:
  entry_points:
    - torchmd-train = torchmdnet.scripts.train:main
  number: 2
# Mainly due to NNPOps only having a linux package
  skip: true  # [not linux]
  rpaths:
    - lib/
    - {{ SP_DIR }}/torch/lib
requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]
    - cuda-version =={{ cuda_compiler_version }}  # [cuda_compiler_version not in (undefined, 'None')] 
  host:
    - python
    - pip
    - pytorch
    - pytorch =*={{ torch_proc_type }}*
    - cuda-version =={{ cuda_compiler_version }}  # [cuda_compiler_version not in (undefined, 'None')] 
  run:
    - python
    - h5py
    - matplotlib-base
    - nnpops
    - pytorch_geometric
    - lightning
    - pydantic <2
    - torchmetrics
    - tqdm
    - cuda-version =={{ cuda_compiler_version }}  # [cuda_compiler_version not in (undefined, 'None')] 
  run_constrained:
    # additional run constraint to the one from the (version-only) run_export;
    # constraining the CPU builds to CPU pytorch isn't 100% necessary, but cleaner
    - pytorch =*={{ torch_proc_type }}*

test:
  imports:
    - torchmdnet
  commands:
    - pip check
    - torchmd-train --help
    - pytest -v -x -s tests
  requires:
    - pip
    - pytest
  source_files:
    - tests
    - examples

about:
  home: https://github.com/torchmd/torchmd-net
  license: MIT
  license_family: MIT
  license_file: README.md
  summary: 'State of the art Pytorch Neural Network Potentials (NNPs)'
  description: |
    TorchMD-NET provides state-of-the-art neural networks potentials (NNPs) and a mechanism to train them. It offers efficient and fast implementations of several NNPs and it is integrated in GPU-accelerated molecular dynamics code like ACEMD, OpenMM and TorchMD. TorchMD-NET exposes its NNPs as PyTorch modules.
  doc_url: https://github.com/torchmd/torchmd-net
  dev_url: https://github.com/torchmd/torchmd-net

extra:
  recipe-maintainers:
    - RaulPPelaez
    - raimis
    - giadefa
